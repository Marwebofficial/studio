rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) if the user is the owner of the profile.
     * @deny (get, list, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //function to check if user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      //function to check if user is the owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //function to check if user is an existing owner.
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to admin user information.
     * @path /admins/{userId}
     * @allow (get, list, create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     * @principle Restricts access to admin-level data.
     */
    match /admins/{userId} {
        //function to check if user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      //function to check if user is the owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //function to check if user is an existing owner.
      function isAdmin() {
        return false;
      }

      allow get: if false; // Deny all read operations.
      allow list: if false; // Deny all read operations.
      allow create: if false; // Deny all write operations.
      allow update: if false; // Deny all write operations.
      allow delete: if false; // Deny all write operations.
    }

    /**
     * @description Controls access to activity logs.
     * @path /activity_logs/{logId}
     * @allow (get, list, create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     * @principle Restricts access to administrative data.
     */
    match /activity_logs/{logId} {
      function isAdmin() {
        return false;
      }

      allow get: if false; // Deny all read operations.
      allow list: if false; // Deny all read operations.
      allow create: if false; // Deny all write operations.
      allow update: if false; // Deny all write operations.
      allow delete: if false; // Deny all write operations.
    }

    /**
     * @description Controls access to chat sessions for a user.
     * @path /users/{userId}/chats/{chatId}
     * @allow (get, list, create, update, delete) if the user is the owner of the chat.
     * @deny (get, list, create, update, delete) if the user is not the owner of the chat.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/chats/{chatId} {
      //function to check if user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      //function to check if user is the owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //function to check if user is an existing owner.
      function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == resource.data.owner_uid;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.owner_uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to messages within a specific chat session.
     * @path /users/{userId}/chats/{chatId}/messages/{messageId}
     * @allow (get, list, create, update, delete) if the user is the owner of the chat.
     * @deny (get, list, create, update, delete) if the user is not the owner of the chat.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/chats/{chatId}/messages/{messageId} {
      //function to check if user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      //function to check if user is the owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //function to check if user is an existing owner.
      function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == resource.data.owner_uid;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.owner_uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}