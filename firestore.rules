/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and chats.
 * Only the authenticated user can read or write their profile data.
 * Admins can read activity logs.
 *
 * @dataStructure
 * - /users/{userId}: User profile data, owned by the user.
 * - /admins/{userId}: Admin user data, access restricted to authenticated admins.
 * - /activity_logs/{logId}: Activity logs, readable by admins.
 * - /users/{userId}/chats/{chatId}: Chat sessions for a specific user, owned by the user.
 * - /users/{userId}/chats/{chatId}/messages/{messageId}: Messages within a chat session, owned by the user.
 *
 * @keySecurityDecisions
 * - User profiles are only accessible to the authenticated user.
 * - Activity logs are readable by admins.
 * - Chats and messages are only accessible to the owner of the chat session.
 * - Listing of users or activity logs is not permitted to regular users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile with matching ID in the data.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data: { email: 'test@example.com', displayName: 'Test User', createdAt: '2024-01-01T00:00:00Z' }
     * @allow (get, update, delete) - User with ID 'user123' reads/updates/deletes their own profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user123' tries to create a profile for 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data: { id: 'user456', email: 'test@example.com', displayName: 'Test User', createdAt: '2024-01-01T00:00:00Z' }
     * @deny (get, update, delete) - User with ID 'user123' tries to read/update/delete profile of 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure admin user data. Only authenticated admins can read or write admin profiles.
     * @path /admins/{userId}
     * @allow (create, get, update, delete) - Admin user creates, reads, updates, or deletes their own admin profile.
     *   - request.auth.uid: 'admin123'
     *   - request.resource.data: { isAdmin: true }
     * @deny (create, get, update, delete) - Non-admin user attempts to create, read, update, or delete an admin profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data: { isAdmin: true }
     * @principle Restricts admin profile access to authenticated admins.
     */
    match /admins/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secure activity logs. Readable by admins.
     * @path /activity_logs/{logId}
     * @allow (get, list) - Admin user reads activity logs.
     *   - request.auth.uid: 'admin123'
     * @deny (get, list) - Non-admin user attempts to read activity logs.
     *   - request.auth.uid: 'user123'
     * @deny (create, update, delete) - Any user attempts to create/update/delete activity logs.
     *   - request.auth.uid: 'user123' or 'admin123'
     * @principle Restricts activity log access to admins.
     */
    match /activity_logs/{logId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if false;
    }

    /**
     * @description Secure chat sessions for a user. Only the authenticated user can read or write their own chats.
     * @path /users/{userId}/chats/{chatId}
     * @allow (create) - User with ID 'user123' creates a chat for themselves.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data: { title: 'My Chat', createdAt: '2024-01-01T00:00:00Z' }
     * @allow (get, update, delete) - User with ID 'user123' reads/updates/deletes their own chat.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user123' tries to create a chat for 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data: { title: 'User456 Chat', createdAt: '2024-01-01T00:00:00Z' }
     * @deny (get, update, delete) - User with ID 'user123' tries to read/update/delete chat of 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chats/{chatId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure messages within a chat session. Only the owner of the chat can read or write messages.
     * @path /users/{userId}/chats/{chatId}/messages/{messageId}
     * @allow (create) - User with ID 'user123' creates a message in their own chat.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data: { id: 'message1', role: 'user', content: 'Hello', createdAt: '2024-01-01T00:00:00Z' }
     * @allow (get, update, delete) - User with ID 'user123' reads/updates/deletes a message in their own chat.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user123' tries to create a message in chat owned by 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data: { id: 'message1', role: 'user', content: 'Hello', createdAt: '2024-01-01T00:00:00Z' }
     * @deny (get, update, delete) - User with ID 'user123' tries to read/update/delete a message in chat owned by 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chats/{chatId}/messages/{messageId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   * @example isSignedIn() == true if request.auth != null
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the resource.
   * @param {string} userId The user ID to compare against the request's authentication UID.
   * @return {boolean} True if the user is the owner, false otherwise.
   * @example isOwner('user123') == (request.auth.uid == 'user123')
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    /**
   * @description Checks if the user is an existing owner of the resource, ensuring the document exists.
   * @param {string} userId The user ID to compare against the request's authentication UID.
   * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  /**
   * @description Checks if the user is an admin.
   * @return {boolean} True if the user is an admin, false otherwise.
   * @example isAdmin() == (request.auth.token.isAdmin == true)
   */
  function isAdmin() {
    return isSignedIn() && request.auth.token.isAdmin == true;
  }
}