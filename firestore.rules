/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and their associated chats and messages.
 * Admins can read activity logs.  Schema validation is relaxed to allow rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /admins/{userId}: Admin user profiles, owned by the user.
 * - /activity_logs/{logId}: Activity logs, readable by admins only.
 * - /users/{userId}/chats/{chatId}: Chats belonging to a user.
 * - /users/{userId}/chats/{chatId}/messages/{messageId}: Messages within a chat, owned by the user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data, chats, and messages.
 * - Listing of all users or admins is disallowed for privacy.
 * - Activity logs are only readable (not writable) by admins.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by matching the `userId` path segment with the authenticated user's `uid`.  No additional `ownerId` field is required in the document data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create a profile at /users/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows admins to read admin profile data, and the user to update their own data.
     * @path /admins/{userId}
     * @allow (create) - User with UID 'user_abc' can create an admin profile at /admins/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their profile at /admins/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create an admin profile at /admins/user_abc.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete the profile at /admins/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /admins/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows admins to read activity logs.
     * @path /activity_logs/{logId}
     * @allow (get, list) - Admin can read activity logs.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete activity logs.
     * @principle Restricts activity log access to admins.
     */
    match /activity_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to read and write their own chat sessions.
     * @path /users/{userId}/chats/{chatId}
     * @allow (create) - User with UID 'user_abc' can create a chat at /users/user_abc/chats/chat1.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their chat at /users/user_abc/chats/chat1.
     * @deny (create) - User with UID 'user_xyz' cannot create a chat at /users/user_abc/chats/chat1.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete the chat at /users/user_abc/chats/chat1.
     *  @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chats/{chatId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own messages within a chat session.
     * @path /users/{userId}/chats/{chatId}/messages/{messageId}
     * @allow (create) - User with UID 'user_abc' can create a message at /users/user_abc/chats/chat1/messages/msg1.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their message at /users/user_abc/chats/chat1/messages/msg1.
     * @deny (create) - User with UID 'user_xyz' cannot create a message at /users/user_abc/chats/chat1/messages/msg1.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete the message at /users/user_abc/chats/chat1/messages/msg1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chats/{chatId}/messages/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
          // TODO: Replace with actual admin check (e.g., reading from /admins collection).
          // This placeholder always returns false, denying admin access for now.
          return false;
    }
  }
}