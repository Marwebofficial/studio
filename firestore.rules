rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

     /**
      * @description Controls access to admin user information.
      * @path /admins/{userId}
      * @allow (get) Admin with UID 'admin123' can read their profile.
      * @allow (create) Admin with UID 'admin123' can create their profile.
      * @allow (update) Admin with UID 'admin123' can update their profile.
      * @allow (delete) Admin with UID 'admin123' can delete their profile.
      * @deny (get) Non-admin user with UID 'user123' cannot read admin profile.
      * @principle Restricts admin profile access to only admins.
      */
    match /admins/{userId} {
         function isAdmin() {
             // TODO: Implement a proper admin check (e.g., custom claims).  This is a placeholder.
             return false;
         }

         function isSignedIn() {
             return request.auth != null;
         }
         allow get: if isSignedIn() && isAdmin();
         allow list: if false;
         allow create: if isSignedIn() && isAdmin();
         allow update: if isSignedIn() && isAdmin();
         allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to activity logs.
     * @path /activity_logs/{logId}
     * @allow (get) Admin can read activity logs.
     * @deny (get) Non-admin user cannot read activity logs.
     * @principle Restricts activity log access to only admins.
     */
    match /activity_logs/{logId} {
        function isAdmin() {
            // TODO: Implement a proper admin check (e.g., custom claims). This is a placeholder.
            return false;
        }

        function isSignedIn() {
            return request.auth != null;
        }
        allow get: if isSignedIn() && isAdmin();
        allow list: if isSignedIn() && isAdmin();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Controls access to user chat sessions.
     * @path /users/{userId}/chats/{chatId}
     * @allow (create) User with UID 'user123' can create a chat.
     * @allow (get) User with UID 'user123' can read their chats.
     * @allow (update) User with UID 'user123' can update their chats.
     * @allow (delete) User with UID 'user123' can delete their chats.
     * @deny (create) User with UID 'user456' cannot create a chat for 'user123'.
     * @deny (get) User with UID 'user456' cannot read the chats of 'user123'.
     * @principle Enforces document ownership for chat sessions.
     */
    match /users/{userId}/chats/{chatId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to messages within a chat session.
     * @path /users/{userId}/chats/{chatId}/messages/{messageId}
     * @allow (create) User with UID 'user123' can create a message in their chat.
     * @allow (get) User with UID 'user123' can read messages in their chat.
     * @allow (update) User with UID 'user123' can update messages in their chat.
     * @allow (delete) User with UID 'user123' can delete messages in their chat.
     * @deny (create) User with UID 'user456' cannot create a message in 'user123's chat.
     * @deny (get) User with UID 'user456' cannot read messages from 'user123's chat.
     * @principle Enforces document ownership for messages within a chat session.
     */
    match /users/{userId}/chats/{chatId}/messages/{messageId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}