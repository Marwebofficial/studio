/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and restricts admin data access.
 * Only authenticated users can access their own profile data. Access to admin data is restricted to admins only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /admins/{userId}: Stores admin user information.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Admin profiles are only accessible to admin users (determined by the existence of the admin document and isAdmin field being true).
 *
 * Denormalization for Authorization:
 *  - The `admins` collection duplicates the `userId` as the document ID. This allows direct `get` access based on `request.auth.uid`,
 *    avoiding the need to query across the entire collection to find the current admin.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (get, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Allow the user to read their own profile.
      allow get: if isSignedIn() && isOwner(userId);
      // Allow the user to list their own profile (This should not make any difference since the ID is known)
      allow list: if isSignedIn() && isOwner(userId);
      // Allow the user to create their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      // Allow the user to update their own profile.
      allow update: if isSignedIn() && isOwner(userId) && resource.data.email == request.auth.token.email;
      // Allow the user to delete their own profile.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to admin user information.
     * @path /admins/{userId}
     * @allow (get) if the user is an admin.
     * @deny (get) if the user is not an admin.
     * @allow (create, update, delete) if false.
     * @principle Restricts admin data access.
     */
    match /admins/{userId} {
       // Allow an admin to read their own admin document
       allow get: if isSignedIn() && isOwner(userId);
       // Allow an admin to read their own admin document
       allow list: if isSignedIn() && isOwner(userId);
       // No one can create admin documents via client.
       allow create: if false;
       // No one can update admin documents via client.
       allow update: if false;
       // No one can delete admin documents via client.
       allow delete: if false;
    }

    // ---- Helper Functions ----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}