/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and chats.
 * Admin privileges are required for accessing activity logs.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /admins/{userId}: Stores admin user information, only accessible by users with isAdmin == true.
 * - /activity_logs/{logId}: Stores activity logs, accessible only by admins.
 * - /users/{userId}/chats/{chatId}: Stores chat sessions for a user, accessible only by the user themselves.
 * - /users/{userId}/chats/{chatId}/messages/{messageId}: Stores messages within a specific chat session, accessible only by the user who owns the chat.
 *
 * Key Security Decisions:
 * - Users can only access their own profile and chat data.
 * - Only admins can access activity logs.
 * - User listing is disabled for privacy.
 *
 * Denormalization for Authorization:
 *  N/A - Current rules do not require denormalization.
 *
 * Structural Segregation:
 * N/A - Drafts and published content are not explicitly segregated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their own profile with matching userId.
     * @allow (get, update, delete) User 'user_abc' can read, update, and delete their own profile.
     * @deny (create, update, delete) User 'user_xyz' cannot create, update, or delete 'user_abc's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.displayName is string && request.resource.data.createdAt is string && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces admin-only access for admin user information.
     * @path /admins/{userId}
     * @allow (get) Admin 'admin_abc' can read their own admin profile.
     * @deny (create, update, delete) Non-admin users cannot create, update, or delete admin profiles.
     * @principle Restricts access to admin-sensitive data.
     */
    match /admins/{userId} {
       function isAdmin() {
         return get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
       }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces admin-only access for activity logs.
     * @path /activity_logs/{logId}
     * @allow (get, list) Admins can read and list activity logs.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete activity logs.
     * @principle Restricts access to audit data.
     */
    match /activity_logs/{logId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for chat sessions. Only the user can read and write their own chats.
     * @path /users/{userId}/chats/{chatId}
     * @allow (create) User 'user_abc' can create chats within their own user space.
     * @allow (get, update, delete) User 'user_abc' can read, update, and delete chats within their own user space.
     * @deny (create, update, delete) User 'user_xyz' cannot create, update, or delete chats in 'user_abc's user space.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/chats/{chatId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.title is string && request.resource.data.createdAt is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for messages within a chat session. Only the user who owns the chat can read and write messages.
     * @path /users/{userId}/chats/{chatId}/messages/{messageId}
     * @allow (create) User 'user_abc' can create messages in their own chats.
     * @allow (get, update, delete) User 'user_abc' can read, update, and delete messages in their own chats.
     * @deny (create, update, delete) User 'user_xyz' cannot create, update, or delete messages in 'user_abc's chats.
     * @principle Secures nested data within a user's data tree.
     */
    match /users/{userId}/chats/{chatId}/messages/{messageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.id is string && request.resource.data.role is string && request.resource.data.content is string && request.resource.data.createdAt is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}