rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile document at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile document at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile document at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile document at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to admin user documents.
     * @path /admins/{userId}
     * @allow (get) - Admin user with UID 'admin123' can read their admin document at /admins/admin123.
     * @deny (create, update, delete) - No one can create, update, or delete admin documents via client.
     * @deny (get) - Non-admin user with UID 'user123' cannot read the admin document at /admins/admin123.
     * @principle Restricts access to admin documents to only authenticated admins.
     */
    match /admins/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Placeholder for admin check.  In a real application, this would likely involve
      // querying a database or using custom claims.
      function isAdmin() {
        return false;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to activity log documents.
     * @path /activity_logs/{logId}
     * @allow (get, list) - Admins can read activity logs for monitoring.
     * @deny (create, update, delete) - Regular users cannot create, update, or delete activity logs.
     * @principle Limits access to activity logs for security and data integrity.
     */
    match /activity_logs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Placeholder for admin check.  In a real application, this would likely involve
      // querying a database or using custom claims.
      function isAdmin() {
        return false;
      }

      allow get, list: if isSignedIn() && isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to chat session documents for a user.
     * @path /users/{userId}/chats/{chatId}
     * @allow (create, get, update, delete) - User 'user123' can manage their own chats.
     * @deny (create, get, update, delete) - User 'user456' cannot access chats of 'user123'.
     */
    match /users/{userId}/chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to message documents within a chat session.
     * @path /users/{userId}/chats/{chatId}/messages/{messageId}
     * @allow (create, get, update, delete) - User 'user123' can manage messages within their own chats.
     * @deny (create, get, update, delete) - User 'user456' cannot access messages in chats of 'user123'.
     */
    match /users/{userId}/chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}