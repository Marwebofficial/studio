/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and
 * restricts admin data access to authenticated admins only. Data validation is
 * relaxed to allow for rapid prototyping, but authorization is strictly enforced.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the
 *   authenticated user with a matching UID.
 * - /admins/{userId}: Stores admin-specific data, accessible only to
 *   authenticated users marked as admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized access to user data.
 * - Admin status is explicitly checked and must be true for admin access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the authenticated user's UID matches the userId.
     * @deny (get, create, update, delete) if the authenticated user's UID does not match the userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Allow anyone to read a user document
      allow get: if isSignedIn() && isOwner(userId);
      // Allow a user to list user documents
      allow list: if false;
      // Allow a user to create their own user document
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email is string;
      // Allow a user to update their own user document
      allow update: if isSignedIn() && isOwner(userId) && resource.data.email == request.resource.data.email;
      // Allow a user to delete their own user document
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to admin user information.
     * @path /admins/{userId}
     * @allow (get, create, update, delete) if the authenticated user is an admin.
     * @deny (get, create, update, delete) if the authenticated user is not an admin.
     * @principle Restricts access to admin data to authenticated admins only.
     */
    match /admins/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.email == "freechatadmin1234@example.com"
    }
  }
}